@using CvatApi
@using System.Globalization
@using PoeShared.Dialogs.Services
@using FileInfo = System.IO.FileInfo
@inherits PoeShared.Blazor.BlazorReactiveComponent<MainWindowViewModel>

<div class="container">
<div class="row">
    <div class="col-12">
        <h4>CVAT API settings</h4>
    </div>
</div>

<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="serverUrl" class="col-form-label">Server URL<span class="text-danger">*</span></label>
    </div>
    <div class="col-sm-9">
        <div class="input-group">
            <InputTextEx type="text" class="form-control" id="serverUrl" @bind-Value="@DataContext.YoloEaseProject.RemoteProject.ServerUrl"/>
            <ReactiveButton Class="btn btn-outline-secondary" Command="@(async () => await ProcessUtils.OpenUri(DataContext.YoloEaseProject.RemoteProject.ServerUrl))">
                <i class="fa fa-link"></i>
                Open
            </ReactiveButton>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="username" class="col-form-label">Username<span class="text-danger">*</span></label>
    </div>
    <div class="col-sm-9">
        <InputTextEx type="text" class="form-control" id="username" placeholder="Enter username" @bind-Value="@DataContext.YoloEaseProject.RemoteProject.Username"/>
    </div>
</div>

<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="password" class="col-form-label">Password<span class="text-danger">*</span></label>
    </div>
    <div class="col-sm-9">
        <InputTextEx type="password" class="form-control" id="password" placeholder="Enter password" @bind-Value="@DataContext.YoloEaseProject.RemoteProject.Password"/>
    </div>
</div>


<div class="row">
    <div class="col-sm-3">
    </div>
    <div class="col-sm-9  text-sm-end d-flex align-items-center">
        <div class="hstack">
            <ReactiveSection Trackers="@(new() {DataContext.WhenAnyValue(x => x.YoloEaseProject.RemoteProject.CurrentUser, x => x.YoloEaseProject.RemoteProject.Username)})">
                @if (DataContext.YoloEaseProject.RemoteProject.CurrentUser == null)
                {
                    <div class="text-danger">not logged in</div>
                }
                else
                {
                    <div class="text-success">logged in as @(DataContext.YoloEaseProject.RemoteProject.Username)</div>
                }
                @if (DataContext.YoloEaseProject.RemoteProject.CurrentUser != null)
                {
                    <ReactiveButton Class="btn btn-link" Command="@DataContext.YoloEaseProject.RemoteProject.Logout">
                        <i class="fa fa-sign-out"></i>
                        Logout
                    </ReactiveButton>
                }
            </ReactiveSection>


        </div>
        <div class="flex-grow-1">

        </div>
        <ReactiveSection Trackers="@(new() {DataContext.WhenAnyValue(x => x.YoloEaseProject.RemoteProject.CurrentUser)})">
            @if (DataContext.YoloEaseProject.RemoteProject.CurrentUser == null)
            {
                <ReactiveButton Class="btn btn-primary" Command="@DataContext.YoloEaseProject.RemoteProject.Login">
                    <i class="fa fa-sign-in"></i>
                    Login
                </ReactiveButton>
            }
            else
            {
                <ReactiveButton Class="btn btn-link" Command="@(() => DataContext.YoloEaseProject.RemoteProject.Refresh())">
                    <i class="fa fa-refresh"></i>
                    Refresh
                </ReactiveButton>
            }
        </ReactiveSection>


    </div>
</div>

<ReactiveSection Trackers="@(new() {DataContext.WhenAnyValue(x => x.YoloEaseProject.RemoteProject.CurrentUser)})">
    @if (DataContext.YoloEaseProject.RemoteProject.CurrentUser != null)
    {
        <div class="row">
            <div class="col-sm-3 text-sm-end">
                <label for="projectId" class="col-form-label">
                    @if (Track(x => x.YoloEaseProject.RemoteProject.IsBusy))
                    {
                        <div class="spinner-border spinner-border-sm"></div>
                    }
                    Project<span class="text-danger">*</span>
                </label>
            </div>
            <div class="col-sm-9 hstack">
                <ReactiveSection Trackers="@(new() {DataContext.WhenAnyValue(x => x.YoloEaseProject.RemoteProject.Projects)})">

                    @if (DataContext.YoloEaseProject.RemoteProject.Projects.Count <= 0)
                    {
                        <div class="text-warning">
                            No projects available
                        </div>
                    }
                    else
                    {
                        <div class="input-group">
                            <ReactiveButton Class="btn btn-outline-secondary"
                                            Command="@(async () => await ProcessUtils.OpenFolder(DataContext.YoloEaseProject.StorageDirectory))">
                                <i class="fa fa-folder-open"></i>
                            </ReactiveButton>
                            <Select TItem="ProjectRead"
                                    TItemValue="int"
                                    Class="form-control w-auto"
                                    DataSource="@(DataContext.YoloEaseProject.RemoteProject.Projects.Items)"
                                    @bind-Value="@DataContext.ProjectId"
                                    ValueName="@nameof(ProjectRead.Id)"
                                    LabelName="@nameof(ProjectRead.Name)"
                                    OnSelectedItemChanged="@(x => DataContext.ProjectId = x?.Id ?? 0)">
                            </Select>
                            <ReactiveButton Class="btn btn-outline-secondary" Command="@DataContext.OpenProject">
                                <i class="fa fa-link"></i>
                                Open
                            </ReactiveButton>
                        </div>
                    }
                </ReactiveSection>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-3 text-sm-end">
                <label for="projectId" class="col-form-label">
                    <ReactiveSection Trackers="@(new() {DataContext.WhenAnyValue(x => x.YoloEaseProject.RemoteProject.IsBusy)})">
                        @if (DataContext.YoloEaseProject.RemoteProject.IsBusy)
                        {
                            <div class="spinner-border spinner-border-sm"></div>
                        }
                        Labels
                    </ReactiveSection>
                </label>
            </div>
            <div class="col-sm-9 hstack">
                <ReactiveSection Trackers="@(new() {DataContext.WhenAnyValue(x => x.YoloEaseProject.RemoteProject.Labels)})">
                    @if (DataContext.YoloEaseProject.RemoteProject.Labels.Count <= 0)
                    {
                        <div class="text-warning">
                            No labels available
                        </div>
                    }
                    else
                    {
                        <div class="wrap-panel">
                            @foreach (var label in DataContext.YoloEaseProject.RemoteProject.Labels.Items)
                            {
                                <div class="item">
                                    <div class="circle" style="background-color: @(label.Color);"></div>
                                    <div class="label">@label.Name</div>
                                </div>
                            }
                        </div>
                    }
                </ReactiveSection>

            </div>
        </div>

        <div class="row">
            <div class="col-sm-3 text-sm-end">
                <label class="col-form-label">
                    Stats
                </label>
            </div>
            <div class="col-sm-9 hstack gap-2 align-items-center">
                <div>
                    <ReactiveSection Trackers="@(new() {DataContext.WhenAnyValue(x => x.YoloEaseProject.RemoteProject.Tasks)})">
                        @("task".ToQuantity(DataContext.YoloEaseProject.RemoteProject.Tasks.Count))
                    </ReactiveSection>
                </div>
                <div>
                    <ReactiveSection Trackers="@(new() {DataContext.WhenAnyValue(x => x.YoloEaseProject.RemoteProject.ProjectFiles)})">
                        @("file".ToQuantity(DataContext.YoloEaseProject.RemoteProject.ProjectFiles.Count))
                    </ReactiveSection>
                </div>
            </div>
        </div>
    }
</ReactiveSection>

<Divider/>

<div class="row mt-3">
    <div class="col-8">
        <h4>Data sources (directories, files, etc)<span class="text-danger">*</span> (@Track(x => x.YoloEaseProject.DataSources.InputDirectories.Count))</h4>
    </div>
    <div class="col-4 text-sm-end flex">
        <ReactiveButton Class="btn btn-primary my-1" Command="@(async () => await AddVideo())">Add Video...</ReactiveButton>
        <ReactiveButton Class="btn btn-primary my-1" Command="@DataContext.AddDataFolderDirectory">Add Folder...</ReactiveButton>
    </div>
</div>

<div class="row">
    <div class="col-12">

        <ReactiveSection Trackers="@(new() {DataContext.WhenAnyValue(x => x.YoloEaseProject.DataSources.InputDirectories)})">
            @if (DataContext.YoloEaseProject.DataSources.InputDirectories.Count > 0)
            {
                <Table TItem="DirectoryInfo" DataSource="@(DataContext.YoloEaseProject.DataSources.InputDirectories.Items)"
                       HidePagination="true">
                    <ActionColumn Title="" Class="text-end">
                        <ReactiveButton Class="btn btn-outline-secondary" Command="@(async () => await PoeShared.Scaffolding.ProcessUtils.OpenFolder(context))">
                            <i class="fa fa-folder-open"></i>
                        </ReactiveButton>
                    </ActionColumn>
                    <PropertyColumn Property="x => x.FullName" Title="Source name">
                        @if (PathUtils.IsParentDir(DataContext.YoloEaseProject.StorageDirectory.FullName, context.FullName))
                        {
                            @(Path.GetRelativePath(DataContext.YoloEaseProject.StorageDirectory.FullName, context.FullName).TakeMidChars(64))
                        }
                        else
                        {
                            @(context.FullName.TakeMidChars(96))
                        }
                    </PropertyColumn>
                    <ActionColumn Title="" Class="text-end">
                        <ReactiveButton Command="@(async () => await DataContext.RemoveDataFolderDirectory(context))">
                            Remove
                        </ReactiveButton>
                    </ActionColumn>
                </Table>
            }
            else
            {
                <div class="alert alert-secondary my-2">
                    Start by adding data sources - folders with images, video files, etc
                </div>
            }
        </ReactiveSection>
    </div>
</div>
<Divider/>

<div class="row mt-3">
    <div class="col-12">
        <h4>Training settings</h4>
    </div>
</div>

<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="modelPath" class="col-form-label">Yolo8/10+ base model</label>
    </div>
    <div class="col-sm-9">
        <div class="input-group">
            <InputTextEx type="text" class="form-control" id="modelPath" placeholder="Yolo8 base model path" @bind-Value="@DataContext.YoloEaseProject.TrainingDataset.BaseModelPath"/>
            <ReactiveButton Class="btn btn-outline-secondary" Command="@DataContext.SelectModel">
                ...
            </ReactiveButton>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="epochs" class="col-form-label">Epochs</label>
    </div>
    <div class="col-sm-9 align-self-center">
        <div class="input-group hstack">
            <input type="number" class="form-control" id="epochs"
                   min="1" step="1"
                   value="@Track(x => x.YoloEaseProject.TrainingDataset.Epochs)"
                   oninput="@((ChangeEventArgs x) => DataContext.YoloEaseProject.TrainingDataset.Epochs = x.Value is not string valueAsString || string.IsNullOrEmpty(valueAsString) ? 1 : Convert.ToInt32(valueAsString))">
            <div style="flex-grow: 5;">
                <small>usually 50-200 is a good choice</small>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="modelSize" class="col-form-label">Model Size</label>
    </div>
    <div class="col-sm-9 align-self-center">
        <div class="input-group hstack">
            <input type="number" class="form-control" id="modelSize"
                   min="32" step="32"
                   value="@Track(x => x.YoloEaseProject.TrainingDataset.ModelSize)"
                   oninput="@((ChangeEventArgs x) => DataContext.YoloEaseProject.TrainingDataset.ModelSize = x.Value is not string valueAsString || string.IsNullOrEmpty(valueAsString) ? 1 : Convert.ToInt32(valueAsString))">
            <div style="flex-grow: 5;">
                <small>640 is default value and should fit most use cases</small>
            </div>
        </div>
    </div>
</div>
<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="trainAdditionalArguments" class="col-form-label">Additional arguments</label>
    </div>
    <div class="col-sm-9 align-self-center">
        <div class="input-group">
            <InputTextEx type="text" class="form-control" id="trainAdditionalArguments" placeholder="command line arguments..." @bind-Value="@DataContext.YoloEaseProject.TrainingDataset.TrainAdditionalArguments"/>
        </div>
    </div>
</div>
<Divider/>
<div class="row mt-3">
    <div class="col-12">
        <h4>Predict settings</h4>
    </div>
</div>

<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="epochs" class="col-form-label">Confidence threshold</label>
    </div>
    <div class="col-sm-9 align-self-center">
        <div class="input-group d-flex">
            <input type="range" class="form-range align-self-center mx-2 w-auto flex-grow-1"
                   id="batchSizePercentage"
                   min="0"
                   max="100"
                   value="@Track(x => x.YoloEaseProject.Predictions.ConfidenceThresholdPercentage.ToString(CultureInfo.InvariantCulture))"
                   oninput="@((ChangeEventArgs x) => DataContext.YoloEaseProject.Predictions.ConfidenceThresholdPercentage = x.Value is not string valueAsString || string.IsNullOrEmpty(valueAsString) ? 0 : Convert.ToSingle(valueAsString))">
            <span class="input-group-text" style="min-width:50px;">@Track(x => $"{x.YoloEaseProject.Predictions.ConfidenceThresholdPercentage}%")</span>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="epochs" class="col-form-label">IoU threshold</label>
    </div>
    <div class="col-sm-9 align-self-center">
        <div class="input-group d-flex">
            <input type="range" class="form-range align-self-center mx-2 w-auto flex-grow-1"
                   id="batchSizeIoUThreshold"
                   min="0"
                   max="100"
                   value="@Track(x => x.YoloEaseProject.Predictions.IoUThresholdPercentage.ToString(CultureInfo.InvariantCulture))"
                   oninput="@((ChangeEventArgs x) => DataContext.YoloEaseProject.Predictions.IoUThresholdPercentage = x.Value is not string valueAsString || string.IsNullOrEmpty(valueAsString) ? 0 : Convert.ToSingle(valueAsString))">
            <span class="input-group-text" style="min-width:50px;">@Track(x => $"{x.YoloEaseProject.Predictions.IoUThresholdPercentage}%")</span>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="predictAdditionalArguments" class="col-form-label">Additional arguments</label>
    </div>
    <div class="col-sm-9 align-self-center">
        <div class="input-group">
            <InputTextEx type="text" class="form-control" id="predictAdditionalArguments" placeholder="command line arguments..." @bind-Value="@DataContext.YoloEaseProject.Predictions.PredictAdditionalArguments"/>
        </div>
    </div>
</div>
<Divider/>

<div class="row mt-3">
    <div class="col-12">
        <h4>Application settings</h4>
    </div>
</div>

<div class="row">
    <div class="col-sm-3 text-sm-end">
        <label for="directoryPath" class="col-form-label">Storage directory</label>
    </div>
    <div class="col-sm-9">
        <div class="input-group">
            <ReactiveButton Class="btn btn-outline-secondary" Command="@DataContext.OpenStorage">
                <i class="fa fa-folder-open"></i>
            </ReactiveButton>
            <span class="input-group-text">
                @(DataContext.StorageDirectory?.FullName)
            </span>
        </div>
    </div>
</div>
<Divider/>


</div>

<VideoSplitterDialog @ref="@videoSplitterDialog" DataContext="@DataContext"></VideoSplitterDialog>
<MultiVideoSplitterDialog @ref="@multiVideoSplitterDialog" DataContext="@DataContext"></MultiVideoSplitterDialog>

@code {
    private readonly IScheduler uiScheduler;

    private VideoSplitterDialog videoSplitterDialog;
    private MultiVideoSplitterDialog multiVideoSplitterDialog;

    public ProjectSettings([Dependency(WellKnownSchedulers.UI)] IScheduler uiScheduler)
    {
        this.uiScheduler = uiScheduler;
    }
    
    [Inject]
    protected IOpenFileDialog? OpenFileDialog { get; init; }
    
    private async Task AddVideo()
    {
        uiScheduler.Schedule(async () =>
        {
            FileInfo videoFile = default;
            if (OpenFileDialog?.ShowDialog() != null)
            {
                OpenFileDialog.InitialDirectory = OpenFileDialog.LastFile.DirectoryName;
                OpenFileDialog.InitialFileName = OpenFileDialog.LastFile.Name;
                videoFile = OpenFileDialog.LastFile;
            }

            if (videoFile == null)
            {
                return;
            }

            await videoSplitterDialog.Show(videoFile);
        });
    }
}