@using CvatApi
@using YoloEase.UI.Dto
@using FileInfo = System.IO.FileInfo
@inherits PoeShared.Blazor.BlazorReactiveComponent<YoloEase.UI.Core.AnnotationsAccessor>

<div class="container">
    <div class="row">
        <div class="col-12">
            <h4>
                Annotated tasks (@(DataContext.AnnotatedTasks.Count))
            </h4>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <ReactiveSection Trackers="@(new() {this.WhenAnyValue(x => x.DataContext.AnnotatedTasks)})">
                <Table TItem="TaskRead" DataSource="@(DataContext.AnnotatedTasks.Items)">
                    <PropertyColumn Property="x => x.Id"/>
                    <PropertyColumn Property="x => x.Name"/>
                    <PropertyColumn Property="x => x.Assignee"/>
                    <PropertyColumn Property="x => x.Status"/>
                    <ActionColumn Title="Action">
                        <Space>
                            <SpaceItem>
                                <ReactiveButton Command="@(async () => await DataContext.Project.NavigateToTask(context.Id.Value))">
                                    Open
                                </ReactiveButton>
                            </SpaceItem>
                        </Space>
                    </ActionColumn>
                </Table>
            </ReactiveSection>
            <ReactiveButton Class="btn btn-primary" Command="@DataContext.DownloadAnnotations">Download annotations</ReactiveButton>
        </div>
    </div>
    <Divider/>

    <div class="row">
        <div class="col-12">
            <h4>
                Annotations (@(DataContext.Annotations.Count))
            </h4>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <Table TItem="TaskAnnotationFileInfo" DataSource="@DataContext.Annotations.Collection">
                <PropertyColumn Property="x => x.TaskId"/>
                <PropertyColumn Property="x => x.TaskName"/>
                <PropertyColumn Property="x => x.FilePath">
                    @(Track(context, x => Path.GetFileNameWithoutExtension(x.FilePath)))
                </PropertyColumn>
                <PropertyColumn Property="x => x.FileSize">
                    @Track(context, x => ByteSize.FromBytes(x.FileSize))
                </PropertyColumn>
                <ActionColumn Title="Action">
                    <Space>
                        <SpaceItem>
                            <ReactiveButton Command="@(async () => await ProcessUtils.SelectFileOrFolder(new FileInfo(context.FilePath)))">Open</ReactiveButton>
                        </SpaceItem>
                        <SpaceItem>
                            <ReactiveButton Command="@(async () => await DataContext.RemoveAnnotationsFile(context))">Remove</ReactiveButton>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </Table>
            <ReactiveButton Class="btn btn-primary" Command="@DataContext.CreateAnnotatedDataset">Prepare dataset</ReactiveButton>
        </div>
    </div>
    <Divider/>

    <div class="row">
        <div class="col-12">
            <h4>
                <ReactiveSection Trackers="@(new() {this.WhenAnyValue(x => x.DataContext.Training.Datasets)})">
                    Datasets (@DataContext.Training.Datasets.Count))
                </ReactiveSection>
            </h4>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <span>
                <ReactiveSection Trackers="@(new() {this.WhenAnyValue(x => x.DataContext.Training.Datasets)})">
                    <Table TItem="DatasetInfo" DataSource="@(DataContext.Training.Datasets.Items)">
                        <PropertyColumn Property="x => x.IndexFile">
                            <ReactiveSection Trackers="@(new() {this.WhenAnyValue(x => x.DataContext.Training.StorageDirectory)})">
                                @(Path.GetRelativePath(DataContext.Training.StorageDirectory.FullName, context.IndexFile.FullName))
                            </ReactiveSection>
                        </PropertyColumn>
                        <ActionColumn Title="Train/Val/Test">
                            <ReactiveSection Trackers="@(new() {context.WhenAnyValue(x => x.ImagesTestCount, x => x.ImagesValidationCount, x => x.ImagesTestCount)})">
                                @($"{context.ImagesTrainingCount} / {context.ImagesValidationCount} / {context.ImagesTestCount}")
                            </ReactiveSection>
                        </ActionColumn>
                        <ActionColumn Title="Action">
                            <Space>
                                <SpaceItem>
                                    <ReactiveButton Command="@(async () => await ProcessUtils.SelectFileOrFolder(new FileInfo(context.IndexFile.FullName)))">Open</ReactiveButton>
                                </SpaceItem>
                            </Space>
                        </ActionColumn>
                    </Table>
                </ReactiveSection>

            </span>
        </div>
    </div>
</div>