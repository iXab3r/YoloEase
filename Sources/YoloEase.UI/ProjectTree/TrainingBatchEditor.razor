@using CvatApi
@using FileInfo = System.IO.FileInfo
@inherits PoeShared.Blazor.BlazorReactiveComponent<YoloEase.UI.Core.TrainingBatchAccessor>

<div class="container">
    <div class="row">
        <div class="col-12">
            <h4>
                Un-annotated files (@Track(x => x.UnannotatedFiles.Count))
            </h4>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <Table TItem="FileInfo" DataSource="@Track(x => x.UnannotatedFiles.Collection)">
                <PropertyColumn Property="x => x.FullName" Title="Name">
                    @Track(context, x => x.Name)
                </PropertyColumn>
                <PropertyColumn Property="x => x.Length" Title="Size">
                    @Track(context, x => ByteSize.FromBytes(x.Length).ToString())
                </PropertyColumn>
            </Table>
        </div>
    </div>

    <Divider/>

    <div class="row">
        <div class="col-12">
            <h4>
                Next training batch/task
            </h4>
        </div>
    </div>

    <div class="row">
        <div class="col-sm-2 text-sm-end">
            <label for="batchSizePercentage" class="col-form-label">Batch size</label>
        </div>
        <div class="col-sm-10">
            <div class="input-group hstack">
                <input type="range" class="form-range w-25"
                       id="batchSizePercentage"
                       min="0"
                       max="100"
                       value="@Track(x => x.BatchPercentage)"
                       oninput="@((ChangeEventArgs x) => DataContext.BatchPercentage = x.Value is not string valueAsString ? 0 : Convert.ToInt32(valueAsString))">
                <div>@Track(x => $"{x.BatchPercentage}% = {"file".ToQuantity(x.BatchSize, ShowQuantityAs.Numeric)}")</div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <ReactiveButton Class="btn btn-primary" Command="@DataContext.PrepareNextBatchFiles">Prepare next batch</ReactiveButton>
        </div>
    </div>
    <Divider/>

    <div class="row">
        <div class="col-12">
            <h4>
                Next batch files (@Track(x => x.BatchFiles.Count))
            </h4>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <Table TItem="FileInfo" DataSource="@Track(x => x.BatchFiles.Collection)">
                <PropertyColumn Property="x => x.FullName" Title="Name">
                    @Track(context, x => x.Name)
                </PropertyColumn>
                <PropertyColumn Property="x => x.Length" Title="Size">
                    @Track(context, x => ByteSize.FromBytes(x.Length).ToString())
                </PropertyColumn>
            </Table>
            <ReactiveButton Class="btn btn-primary" Command="@DataContext.CreateNextTask">Create task</ReactiveButton>
        </div>
    </div>
    <Divider/>

    <div class="row">
        <div class="col-12">
            <h4>
                Un-annotated tasks (@Track(x => x.UnannotatedTasks.Count)))
            </h4>
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <Table TItem="TaskRead" DataSource="@Track(x => x.UnannotatedTasks.Collection)">
                <PropertyColumn Property="x => x.Id"/>
                <PropertyColumn Property="x => x.Name"/>
                <PropertyColumn Property="x => x.Assignee"/>
                <PropertyColumn Property="x => x.Status"/>
                <ActionColumn Title="Action">
                    <Space>
                        <SpaceItem>
                            <ReactiveButton Command="@(async () => await DataContext.Project.NavigateToTask(context.Id.Value))">
                                Open
                            </ReactiveButton>
                        </SpaceItem>
                    </Space>
                </ActionColumn>
            </Table>
        </div>
    </div>
    <Divider/>
</div>