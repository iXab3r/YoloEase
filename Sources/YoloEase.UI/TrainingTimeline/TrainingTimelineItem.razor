@inherits PoeShared.Blazor.BlazorReactiveComponent<TrainingTimelineEntry>

<div class="d-flex">
    <ReactiveSection DebounceTime="@PoeShared.UI.UiConstants.UiThrottlingDelay" Trackers="@(new() { this.WhenAnyValue(x => x.DataContext.ProgressPercent) })">
        @{
            var progress = DataContext.ProgressPercent;
        }
        @if (progress != null)
        {
            <ProgressBar Value="@(progress.Value)" Class="align-self-center mx-2" Style="width: 50px;position: absolute;left: -90px;"/>
        }
    </ReactiveSection>
    
    <div>
        @Track(x => $"{x.Text}{(DataContext.IsBusy ? "..." : string.Empty)}")
    </div>
    <ReactiveButton
        Class="btn btn-link h-auto mx-2 p-0 align-self-start"
        HideIfDisabled="true"
        IsEnabled="@Track(x => x.IsBusy)"
        Command="@(DataContext.Cancel)">
        <i class="fa fa-stop-circle-o fa-fixed"></i>
        stop
    </ReactiveButton>
    <ReactiveButton
        Class="btn btn-link h-auto mx-2 p-0 align-self-start"
        HideIfDisabled="true"
        IsEnabled="@Track(x => x.ModelFile != null)"
        Command="@(async () => await ProcessUtils.SelectFileOrFolder(DataContext.ModelFile))">
        <i class="fa fa-folder-o fa-fixed"></i>
        open...
    </ReactiveButton>
    <ReactiveButton
        Class="btn btn-link h-auto mx-2 p-0 align-self-start"
        HideIfDisabled="true"
        IsEnabled="@Track(x => x.ModelFile != null)"
        Command="@(async () => await DataContext.Predict())">
        <i class="fa fa-folder-o fa-fixed"></i>
        predict...
    </ReactiveButton>
</div>