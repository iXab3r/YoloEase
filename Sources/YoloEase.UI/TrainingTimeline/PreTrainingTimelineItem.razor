@inherits PoeShared.Blazor.Controls.TimelineItemBase<PreTrainingTimelineEntry>

<div class="d-flex">
    @if (DataContext.ProgressPercent != null)
    {
        <ProgressBar Value="@(DataContext.ProgressPercent ?? 0)" Class="align-self-center mx-2" Style="width: 50px;position: absolute;left: -90px;"/>
    }

    <div class="vstack gap-3">
        @if (DataContext.TerminatedStaleProcessCount > 0)
        {
            <div class="hstack gap-2">
                <span class="badge bg-danger">@($"Terminated {"stale process".ToQuantity(DataContext.TerminatedStaleProcessCount)}")</span>
            </div>
        }
        @if (DataContext.ChecksResult != null)
        {
            var isCpu = DataContext.ChecksResult.DeviceIndex.Contains("CPU", StringComparison.OrdinalIgnoreCase);
            <div class="hstack gap-2">
                @if (isCpu)
                {
                    <span class="badge bg-danger">@(DataContext.ChecksResult.DeviceName))</span>
                }
                else
                {
                    <span class="badge bg-success">@(DataContext.ChecksResult.DeviceName))</span>
                }
                <span class="badge bg-secondary">@(DataContext.ChecksResult.DeviceType))</span>
                <span class="badge bg-secondary">@(DataContext.ChecksResult.DeviceIndex))</span>
                <span class="badge bg-secondary">@(DataContext.ChecksResult.PythonVersion))</span>
                <span class="badge bg-secondary">@(DataContext.ChecksResult.YoloVersion))</span>
                <span class="badge bg-secondary">@(DataContext.ChecksResult.TorchVersion))</span>
            </div>
            @if (isCpu)
            {
                <div class="alert alert-warning">
                    You're training on CPU, which is much slower than on GPU. <a href="https://wiki.eyeauras.net/en/YoloEase/how-to-train-on-gpu">Read more...</a>
                </div>
            }
        }
        else
        {
            <div>
                @($"{DataContext.Text}{(DataContext.IsBusy ? "..." : string.Empty)}")
                <ReactiveButton
                    Class="btn btn-link h-auto mx-2 p-0 align-self-start"
                    HideIfDisabled="true"
                    IsEnabled="@(DataContext.IsBusy)"
                    Command="@(DataContext.Cancel)">
                    <i class="fa fa-stop-circle-o fa-fixed"></i>
                    stop
                </ReactiveButton>
            </div>
        }
    </div>


</div>

@code {

    public PreTrainingTimelineItem()
    {
        ChangeTrackers.Add(this, x => x.DataContext.TerminatedStaleProcessCount);
        ChangeTrackers.Add(this, x => x.DataContext.ChecksResult);
    }

}