@inherits YoloEaseComponent<AutomaticTrainer>

<div class="d-grid-auto-flow-row gap-3" style="width: 300px;">
    <div class="d-flex gap-1 align-items-center">
        <label class="text-nowrap">
            @Track(x => $"{x.Project.Assets.Files.Count} total / {x.Project.TrainingBatch.UnannotatedFiles.Count} unannotated")
        </label>
    </div>

    <div>
        <div>Batch size</div>
        <div class="d-flex gap-1 align-items-center">
            <input type="range" class="flex-grow-1"
                   id="batchSizePercentage"
                   min="@Track(x => x.Project.TrainingBatch.MinBatchPercentage)"
                   max="@Track(x => x.Project.TrainingBatch.MaxBatchPercentage)"
                   value="@Track(x => x.Project.TrainingBatch.BatchPercentage)"
                   oninput="@((ChangeEventArgs x) => DataContext.Project.TrainingBatch.BatchPercentage = x.Value is not string valueAsString ? 0 : Convert.ToInt32(valueAsString))">
            <label class="text-nowrap">@Track(x => $"{x.Project.TrainingBatch.BatchPercentage}%/{"file".ToQuantity(x.Project.TrainingBatch.BatchSize, ShowQuantityAs.Numeric)}")</label>
        </div>
    </div>

    <div>
        <div>File pick strategy</div>
        <div class="d-flex gap-1 align-items-center">
            <RadioGroup @bind-Value="DataContext.PickStrategy" Size="@(AntSizeLDSType.Small)">
                <Radio Value="@(AutomaticTrainerFilePickStrategy.Random)">
                    Random
                </Radio>
                <Radio Value="@(AutomaticTrainerFilePickStrategy.ActiveLearning)">
                    Active learning
                </Radio>
            </RadioGroup>
        </div>
    </div>

    <div>
        <div>Prediction strategy</div>
        <div class="d-flex gap-1 align-items-center">
            <RadioGroup @bind-Value="DataContext.PredictionStrategy" Size="@(AntSizeLDSType.Small)">
                <Radio Value="@(AutomaticTrainerPredictionStrategy.Unlabeled)">
                    <BootstrapTooltip Title="If set, will run prediction step only on those files which are not labeled yet">
                        Unlabeled
                    </BootstrapTooltip>
                </Radio>

                <Radio Value="@(AutomaticTrainerPredictionStrategy.AllFiles)">
                    <BootstrapTooltip Title="If set, will run prediction on all available files every time">
                        All files
                    </BootstrapTooltip>
                </Radio>
                <Radio Value="@(AutomaticTrainerPredictionStrategy.Disabled)">
                    <BootstrapTooltip Title="If set, won't run predictions at all - will use latest available results">
                        Disabled
                    </BootstrapTooltip>
                </Radio>
            </RadioGroup>
        </div>
    </div>

    <div>
        <div>Prediction model</div>
        <div class="d-flex gap-1 align-items-center">
            <RadioGroup @bind-Value="DataContext.ModelStrategy" Size="@(AntSizeLDSType.Small)">
                <Radio Value="@(AutomaticTrainerModelStrategy.Latest)">
                    Use Latest
                </Radio>
                <Radio Value="@(AutomaticTrainerModelStrategy.Custom)">
                    Custom
                </Radio>
            </RadioGroup>
        </div>
    </div>

    <div>
        <div>Prediction model path</div>
        <div class="d-flex align-items-center input-group">
            <ReactiveSection Trackers="@(new() {this.WhenAnyValue(x => x.DataContext.Project.Predictions.PredictionModel)})">
                <ReactiveButton Class="btn btn-outline-secondary"
                                IsEnabled="@(DataContext.Project.Predictions.PredictionModel != null)"
                                Command="@(async () => await ProcessUtils.SelectFileOrFolder(DataContext.Project.Predictions.PredictionModel.ModelFile))">
                    <i class="fa fa-folder-open"></i>
                </ReactiveButton>
                
                <div class="form-control input-group-text" id="modelFile">@((DataContext.Project.Predictions.PredictionModel?.ModelFile?.Name ?? "<null>").TakeMidChars(32))</div>
                <ReactiveButton Class="btn btn-outline-secondary" MinExecutionTime="TimeSpan.Zero" Command="@(DataContext.Project.Predictions.SelectModel)"
                                IsEnabled="@(Track(x => x.ModelStrategy == AutomaticTrainerModelStrategy.Custom))">
                    <span>...</span>
                </ReactiveButton>
            </ReactiveSection>
        </div>
    </div>

    <div>
        <div>Auto-annotate</div>
        <div class="d-flex gap-1 align-items-center">
            <Switch Size="small" @bind-Checked="@DataContext.AutoAnnotate"/>
        </div>
    </div>


    @if (Track(x => x.AutoAnnotate))
    {
        <div>
            <div>Prediction results</div>
            <div class="d-flex gap-1 align-items-center">
                @{
                    var predictions = Track(x => x.Project.Predictions.LatestPredictions);
                }
                @if (predictions == null || predictions.Predictions.IsEmpty())
                {
                    <div class="badge bg-warning">No predictions yet, Start training</div>
                }
                else
                {
                    var labels = predictions.Predictions.SelectMany(x => x.Labels).Select(x => x.Score).ToArray();
                    <div class="d-flex gap-1">
                        <div class="badge bg-success">
                            @($"prediction".ToQuantity(predictions.Predictions.Length))
                        </div>
                        <div class="badge bg-secondary">
                            @($"label".ToQuantity(labels.Length))
                        </div>
                        @if (labels.Any())
                        {
                            <div class="badge bg-secondary">
                                @($"AvgConf: {labels.Average() * 100:F1}%")
                            </div>
                        }
                    </div>
                }
            </div>
        </div>

        <div>
            <div>Confidence threshold</div>
            <div class="d-flex gap-1 align-items-center">
                <input type="range" class="flex-grow-1"
                       id="batchSizePercentage"
                       min="0"
                       max="100"
                       value="@Track(x => x.AutoAnnotateConfidenceThresholdPercentage)"
                       oninput="@((ChangeEventArgs x) => DataContext.AutoAnnotateConfidenceThresholdPercentage = x.Value is not string valueAsString ? 0 : Convert.ToInt32(valueAsString))">
                <label class="text-nowrap">@Track(x => $"{x.AutoAnnotateConfidenceThresholdPercentage:F0}%")</label>
                @if (Track(x => x.AutoAnnotateUnannotatedFilesCount > 0))
                {
                    <div class="badge bg-success">
                        @($"file".ToQuantity(Track(x => x.AutoAnnotateUnannotatedFilesCount)))
                    </div>
                }
                else
                {
                    <div class="badge bg-warning">
                        @("No files")
                    </div>
                }
            </div>
        </div>
    }
</div>

@code {

}